"""
    Цей модуль містить клас EmailAuthenticationBackend, який є власним
    аутентифікаційним бекендом в Django.
    Він успадковується від ModelBackend, що дає йому доступ
    до стандартних методів аутентифікації.
    Цей клас дозволяє аутентифікувати користувачів
    за електронною поштою замість стандартного імені користувача.
    Модуль містить метод authenticate, який перевіряє, чи існує
    користувач з вказаною електронною поштою та паролем,
    і повертає користувача, якщо він існує та пароль вірний,
    або повертає None, якщо користувача не знайдено або пароль невірний.
    Модуль також містить метод get_user,
    який отримує користувача по його ідентифікатору.
    Цей метод використовується в Django для отримання даних
    про користувача під час обробки запитів.
    Якщо користувача не знайдено, метод повертає None.
"""

from django.contrib.auth.backends import ModelBackend
from django.core.exceptions import ObjectDoesNotExist

from accounts.models import User


class EmailAuthenticationBackend(ModelBackend):
    """ Клас це власний аутентифікаційний бекенд, який використовується
        для аутентифікації користувачів за електронною поштою замість
        стандартного імені користувача.
        Клас успадковується від ModelBackend, що дає йому доступ
        до стандартних методів аутентифікації.
    """

    def authenticate(self, request, username=None, password=None, **kwargs):
        """ Перевіряє, чи існує користувач з вказаною електронною поштою
            та паролем, і повертає користувача, якщо він існує та пароль
            вірний, або повертає None, якщо користувача не знайдено
            або пароль невірний.
        """
        try:
            user = User.objects.get(email=username)
            if user.check_password(password):
                return user
        except ObjectDoesNotExist:
            pass

        return None

    def get_user(self, user_id: int):
        """ Отримує користувача по його ідентифікатору.
            Цей метод використовується в Django для отримання
            даних про користувача під час обробки запитів.
            Якщо користувача не знайдено, метод повертає None.
            Таким чином, цей клас реалізує аутентифікацію користувачів за
            електронною адресою і дозволяє використовувати
            її замість імені користувача для входу в систему.
        """
        try:
            user = User.objects.get(pk=user_id)
            return user
        except ObjectDoesNotExist:
            return None
